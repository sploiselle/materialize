==> test/sqllogictest/list.slt
    select LIST[1,2,3]
    select LIST[1,LIST[2,3]]
    select LIST[[1],[2,3]]
    select LIST[]
    select LIST[] :: INT LIST
    select LIST[null]
    select LIST[1, null]
    select LIST[1, null] :: INT LIST
    select LIST[[1, null], []] :: INT LIST LIST
    SELECT LIST[[[[1], [2]]], [[[3]]]]
    select LIST[1, null] :: INT LIST LIST
    select LIST[1, null] :: TEXT LIST
    select LIST['foo', 'f}o', '"\', null, 'null', 'NULL']
    select list[list[list['"']]];
    select list['{1}']
    SELECT LIST[LIST[]::text list, LIST['a', 'b'], LIST['z']]
    SELECT LIST [1, 2, 3][2];
    SELECT LIST [1, 2, 3][100];
    SELECT LIST [1, 2, 3][1][1];
    SELECT LIST [1, 2, 3][2:3];
    SELECT LIST [1, 2, 3][2:];
    SELECT LIST [1, 2, 3][:2];
    SELECT LIST [1, 2, 3][:];
    SELECT LIST [1, 2, 3][100:];
    SELECT LIST [1, 2, 3][:100];
    SELECT LIST [1, 2, 3][:, :]
    SELECT LIST [1, 2, 3][2:3][1:1];
    SELECT LIST [1, 2, 3][2:3][2];
    SELECT LIST [[1, 2, 3], [4, 5]][1]
    SELECT LIST [[1, 2, 3], [4, 5]][1][3]
    SELECT LIST [[1, 2, 3], [4, 5]][100]
    SELECT LIST [[1, 2, 3], [4, 5]][1][100]
    SELECT LIST [[1, 2, 3], [4, 5]][100][1]
    SELECT LIST [[1, 2, 3], [4, 5]][1][1][1]
    SELECT LIST [[1, 2, 3], [4, 5]][2:2]
    SELECT LIST [[1, 2, 3], [4, 5]][1:2, 2:3];
    SELECT LIST [[1, 2, 3], [4, 5]][2:]
    SELECT LIST [[1, 2, 3], [4, 5]][:2, 2:]
    SELECT LIST [[1, 2, 3], [4, 5]][:, 2:]
    SELECT LIST [[1, 2, 3], [4, 5]][100:, :]
    SELECT LIST [[1, 2, 3], [4, 5]][:, 100:]
    SELECT LIST [[1, 2, 3], [4, 5]][:, 3:3]
    SELECT LIST [[1, 2, 3], [4, 5]][:100, :];
    SELECT LIST [[1, 2, 3], [4, 5]][:, :100]
    SELECT LIST [[1, 2, 3], [4, 5]][:, :, :]
    SELECT LIST [[1, 2, 3], [4, 5]][2:2][1:1]
    SELECT LIST [[1, 2, 3], [4, 5]][1:2][2]
    SELECT LIST [[1, 2, 3], [4, 5]][1:2][2][2:2]
    SELECT LIST [[1, 2, 3], [4, 5]][1:2][2][2:2][1]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][3]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][100]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][100]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100][2][3]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][3][1]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2]
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 1:1];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, 1:1];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100:100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 100:100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, 100:100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 100:100, :];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 2:2];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 2:2, 2:2];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, :100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :100, :100];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, :, :];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1][2:2][1];
    SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1][2:3][1][2:3][2];
    SELECT (LIST[[1, 2, 3], NULL, [4]]::INT LIST LIST)[2][1]
    SELECT (LIST[[1, 2, 3], NULL, [4]]::INT LIST LIST)[2:3, 2:2]
    SELECT LIST[1, 2, 3][NULL]
    SELECT LIST[1, 2, 3][NULL:NULL]
    SELECT LIST[1, 2, 3][1:NULL]
    SELECT LIST[1, 2, 3][NULL:1]
    SELECT LIST[1, 2, 3][NULL:]
    SELECT LIST[1, 2, 3][:NULL]
    SELECT LIST[NULL][:]
    SELECT LIST[1, NULL, 3][:NULL]
    SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:];
    SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3][1];
    SELECT (LIST[NULL]::INT LIST)[1:1];
    SELECT (LIST[NULL, NULL]::INT LIST LIST)[:, 1:1];
    SELECT (LIST[NULL, [NULL]]::INT LIST LIST)[:, 1:1];
    SELECT (LIST [[1, NULL, 3], NULL, [4, 5, 6]]::INT LIST LIST)[2:3, 2:2];
    SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3, 2:2];
    SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3, 4:4];
    SELECT (LIST [NULL, [NULL], [[NULL]]]::INT LIST LIST LIST)[:, :, :];
    SELECT (LIST [NULL, [NULL], [[NULL]]]::INT LIST LIST LIST)[:, :, 2:2];
    SELECT (LIST[]::INT LIST)[1]
    SELECT (LIST[]::INT LIST)[:]
    SELECT (LIST[]::INT LIST)[1:1]
    SELECT (LIST[]::INT LIST LIST)[1:1, 1:1]
    SELECT LIST[1, 2, 3][2:1];
    SELECT LIST[1, 2, 3][-100];
    SELECT LIST[1, 2, 3][-100:];
    SELECT LIST[1, 2, 3][-100:99];
    SELECT LIST[1, 2, 3][-100:-99];
    SELECT LIST[1, 2, 3][-100:-101];
    SELECT LIST[1, 2, 3][:-100];
    SELECT LIST[1][9223372036854775807::bigint]
    SELECT LIST[1][-9223372036854775807::bigint]
    SELECT LIST[1][9223372036854775807::bigint:9223372036854775807::bigint]
    SELECT LIST[1][9223372036854775807::bigint:-9223372036854775807::bigint]
    SELECT LIST[1][-9223372036854775807::bigint:9223372036854775807::bigint]
    SELECT LIST[1][-9223372036854775807::bigint:-9223372036854775807::bigint]
    select LIST[1,2,3][1.4];
    select LIST[1,2,3][1.5];
    select LIST[1,2,3][1.5::real];
    select LIST[1,2,3][1.5::float];
    select LIST[1,2,3][1.5 + 1.6];
    select LIST[1,2,3][0.1 * 2 : 0.5 + 1.6];
resolving polymorphic types 
	 self Exact([Plain(Int32), Plain(Int32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Int64), Plain(Int64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float32), Plain(Float32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float64), Plain(Float64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([Plain(Float32), Plain(Float32)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float32), Plain(Float32)]), exact_matches: 0, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Float64), Plain(Float64)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float64), Plain(Float64)]), exact_matches: 0, preferred_types: 2 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), op: "<omitted>" }, proposed_params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(Int32), Plain(Int32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Int64), Plain(Int64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float32), Plain(Float32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float64), Plain(Float64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([Plain(Float32), Plain(Float32)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float32), Plain(Float32)]), exact_matches: 0, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Float64), Plain(Float64)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float64), Plain(Float64)]), exact_matches: 0, preferred_types: 2 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), op: "<omitted>" }, proposed_params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), exact_matches: 1, preferred_types: 0 }]
    select LIST[1,2,3][LIST[1][2.0 / 2]];
resolving polymorphic types 
	 self Exact([Plain(Int32), Plain(Int32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Int64), Plain(Int64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float32), Plain(Float32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float64), Plain(Float64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([Plain(Float32), Plain(Float32)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float32), Plain(Float32)]), exact_matches: 0, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Float64), Plain(Float64)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float64), Plain(Float64)]), exact_matches: 0, preferred_types: 2 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), op: "<omitted>" }, proposed_params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(Int32), Plain(Int32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Int64), Plain(Int64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float32), Plain(Float32)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Float64), Plain(Float64)]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
resolving polymorphic types 
	 self Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]) 
	 types [Some(Decimal(38, 1)), Some(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([Plain(Float32), Plain(Float32)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float32), Plain(Float32)]), exact_matches: 0, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Float64), Plain(Float64)]), op: "<omitted>" }, proposed_params: Exact([Plain(Float64), Plain(Float64)]), exact_matches: 0, preferred_types: 2 }, Candidate { fimpl: FuncImpl { params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), op: "<omitted>" }, proposed_params: Exact([Plain(Decimal(0, 0)), Plain(Decimal(0, 0))]), exact_matches: 1, preferred_types: 0 }]
    SELECT LIST[1,2,3]['dog']
    SELECT LIST [[1, 2, 3], [4, 5]][DATE '2001-01-01']
    SELECT LIST [[1, 2, 3], [4, 5]][TIMESTAMP '2001-01-01']
    SELECT LIST[1,2,3][1:'dog']
    SELECT LIST [[1, 2, 3], [4, 5]][1:DATE '2001-01-01']
    SELECT LIST [[1, 2, 3], [4, 5]][1:TIMESTAMP '2001-01-01']
    SELECT list_append(LIST[1, 2], 3)
    SELECT list_append(LIST[[1], [2]], LIST[3])
    SELECT list_append(LIST[1], NULL::INT)
    SELECT list_append(NULL::INT LIST, 1)
    SELECT list_append(NULL::INT LIST, NULL::INT)
    SELECT list_append(LIST[[1]], NULL::INT LIST)
    SELECT list_append(NULL::INT LIST LIST, LIST[1])
    SELECT list_append(NULL::INT LIST LIST, NULL::INT LIST)
    SELECT list_append(LIST[1], NULL)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }]
    UnexpectedPlanSuccess:test/sqllogictest/list.slt:709 expected error: 
    ----
    SELECT list_append(LIST[1], 'a');
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_append(LIST[1], LIST[2])
    SELECT list_append(1, LIST[1])
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(Int32), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [ListAny, Plain(List(Int32))]
Candidates []
    SELECT list_cat(LIST[1, 2], LIST[3, 4])
    SELECT list_cat(LIST[[1]], LIST[[2]])
    SELECT list_cat(LIST[1], NULL::INT LIST)
    SELECT list_cat(NULL::INT LIST, LIST[1])
    SELECT list_cat(NULL::INT LIST, NULL::INT LIST)
    SELECT list_cat(LIST[1], NULL)
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    UnexpectedPlanSuccess:test/sqllogictest/list.slt:753 expected error: 
    ----
    SELECT list_cat('a', LIST[1])
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_cat(LIST[1], LIST[[2]])
    SELECT list_ndims(LIST [1, 2, 3])
    SELECT list_ndims(LIST []::INT LIST)
    SELECT list_ndims(LIST[[1],[1]])
    SELECT list_ndims(LIST [[[1], [1]], [[1]]])
    SELECT list_ndims(LIST[[1],[1]][1:1])
    SELECT list_ndims(LIST [[[1], [1]], [[1]]][1:2])
    SELECT list_ndims(LIST[[1],[1]][1])
    SELECT list_ndims(LIST [[[1], [1]], [[1]]][1])
    SELECT list_ndims(LIST [[[1], [1]], [[1]]][1][1])
    SELECT list_ndims(LIST[NULL]::INT LIST)
    SELECT list_ndims(LIST[NULL]::INT LIST LIST)
    SELECT list_ndims(LIST[[1], NULL]::INT LIST LIST)
    SELECT list_ndims((LIST[[1],NULL]::INT LIST LIST)[2])
    SELECT list_length(LIST [1])
    SELECT list_length(LIST [1, 1])
    SELECT list_length(LIST[[1],[1]])
    SELECT list_length(LIST [[[1], [1]], [[1]]])
    SELECT list_length(LIST []::INT LIST)
    SELECT list_length(LIST[[1],[1]][1:1])
    SELECT list_length(LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2])
    SELECT list_length(LIST [[[1], [1]], [[1]]][1])
    SELECT list_length(LIST [[[1], [1]], [[1]]][1][1])
    SELECT list_length(LIST[1, NULL]::INT LIST)
    SELECT list_length(LIST[[1],NULL]::INT LIST LIST)
    SELECT list_length((LIST[[1],NULL]::INT LIST LIST)[2])
    SELECT list_length_max(LIST [1, 2, 3], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [1, 2, 3, 4], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[[1],[2,3]], 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]], 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]], 3)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST []::INT LIST, 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[]]::INT LIST LIST, 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[[1], [2]][1:1], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[[1], [2, 3]][2:2], 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:2], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:1], 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:1], 3)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(List(Int32)))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(List(Int32))
Resolved polymorphic types [Plain(List(List(List(Int32)))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(List(Int32)))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[[1], [2, 3]][2], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1], 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1][2], 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(NULL::INT LIST, 1);
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[1, NULL, 3]::INT LIST, 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max(LIST[[1],NULL]::INT LIST LIST, 1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[[1],NULL]::INT LIST LIST), 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[NULL]::INT LIST LIST), 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[1]::INT LIST), 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[NULL]::INT LIST), 2)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[NULL]::INT LIST LIST), 3)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(List(Int32))), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[1]::INT LIST), 0)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[1]::INT LIST), -1)
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_length_max((LIST[1]::INT LIST), LIST[-1][1])
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListAny, Plain(Int64)]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int64)]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, Plain(Int64)]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int64)]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_prepend(1, LIST[2, 3])
    SELECT list_prepend(LIST[1], LIST[[2], [3]])
    SELECT list_prepend(NULL::INT, LIST[1])
    SELECT list_prepend(1, NULL::INT LIST)
    SELECT list_prepend(NULL::INT, NULL::INT LIST)
    SELECT list_prepend(NULL::INT LIST, LIST[[1]])
    SELECT list_prepend(LIST[1], NULL::INT LIST LIST)
    SELECT list_prepend(NULL::INT LIST, NULL::INT LIST LIST)
    SELECT list_prepend(NULL, LIST[1])
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    UnexpectedPlanSuccess:test/sqllogictest/list.slt:1072 expected error: 
    ----
    SELECT list_prepend('a', LIST[1])
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    SELECT list_prepend(LIST[1], LIST[2])
    SELECT list_prepend(LIST[1], 1)
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(Int32)]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), ListAny]
Candidates []
    SELECT LIST[1, 2] || LIST[3, 4]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[[1], [2]] || LIST[[3], [4]]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1, 2] || 3
    SELECT 1 || LIST[2, 3]
    SELECT LIST[[1], [2]] || LIST[3]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1] || LIST[[2], [3]]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1] || NULL::INT LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT  NULL::INT LIST || LIST[1]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT NULL::INT LIST || NULL::INT LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1] || NULL::INT
    SELECT NULL::INT LIST || 1
    SELECT NULL::INT LIST || NULL::INT
    SELECT LIST[1] || NULL
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 1, preferred_types: 0 }]
    Unsupported:test/sqllogictest/list.slt:1157:
    no overload for i32 list || unknown: unable to determine which implementation to use; try providing explicit casts to match parameter types
    ----
    SELECT NULL || LIST[1]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    Unsupported:test/sqllogictest/list.slt:1162:
    no overload for unknown || i32 list: unable to determine which implementation to use; try providing explicit casts to match parameter types
    ----
    SELECT NULL::INT || LIST[1]
    SELECT 1 || NULL::INT LIST
    SELECT NULL::INT || NULL::INT LIST
    SELECT LIST[[1]] || NULL::INT LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT NULL::INT LIST LIST || LIST[1]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT NULL::INT LIST LIST || NULL::INT LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(Int32))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 2, preferred_types: 0 }]
    SELECT NULL::INT LIST || LIST[[1]]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1] || NULL::INT LIST LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
    SELECT NULL::INT LIST || NULL::INT LIST LIST
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type Int32
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), Some(List(List(Int32)))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 2, preferred_types: 0 }]
    SELECT LIST[1] || LIST['a']
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 1, preferred_types: 0 }]
    SELECT LIST[1] || 'a'
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(Int32)), None]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(Int32)]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(Int32)), None]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(Int32)), Plain(List(List(Int32)))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(Int32)]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(List(Int32)))]), exact_matches: 1, preferred_types: 0 }]
    SELECT LIST[NULL] || LIST[1]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    SELECT LIST[[NULL]] || LIST[1]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [None, Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(List(Int32)), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(Int32)
Resolved polymorphic types [Plain(List(List(Int32))), Plain(List(Int32))]
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [None, Some(List(Int32))]
Inside the polymorphic resolution
constrained type Int32
Resolved polymorphic types [Plain(Int32), Plain(List(Int32))]
Candidates [Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(Int32)), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListAny, ListElementAny]), op: "<omitted>" }, proposed_params: Exact([Plain(List(List(Int32))), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }, Candidate { fimpl: FuncImpl { params: Exact([ListElementAny, ListAny]), op: "<omitted>" }, proposed_params: Exact([Plain(Int32), Plain(List(Int32))]), exact_matches: 1, preferred_types: 0 }]
    SELECT LIST[[[1]]] || LIST[2]
resolving polymorphic types 
	 self Exact([Plain(String), NonListAny]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([NonListAny, Plain(String)]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(String), Plain(String)]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([Plain(Jsonb), Plain(Jsonb)]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
resolving polymorphic types 
	 self Exact([ListAny, ListAny]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
resolving polymorphic types 
	 self Exact([ListAny, ListElementAny]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(Int32))
resolving polymorphic types 
	 self Exact([ListElementAny, ListAny]) 
	 types [Some(List(List(List(Int32)))), Some(List(Int32))]
Inside the polymorphic resolution
constrained type List(List(List(Int32)))
Candidates []
    FAIL: unsupported=2 unexpected-plan-success=3 success=231 total=236
FAIL: unsupported=2 unexpected-plan-success=3 success=231 total=236
